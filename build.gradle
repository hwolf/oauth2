
buildscript {
    repositories {
        maven { 
            url "http://jcenter.bintray.com/"
        }
    }
    dependencies { 
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE" 
    }
}

plugins { 
    id 'org.unbroken-dome.test-sets' version '1.1.0' 
    //id 'com.coverity.ondemand' version '1.3.617'
}

def javaProjects = subprojects

configure(allprojects) {
    apply plugin: 'jacoco'
    
    repositories {
        maven {  
            url "http://jcenter.bintray.com/"
        }
    }

    jacoco {
        toolVersion = "0.7.5.201505241946" 
    }
}

configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'spring-boot'
    apply plugin: 'org.unbroken-dome.test-sets'

    springBoot { bootRepackage.enabled = false }

    ext {
        V_GUAVA = '18.0'
        V_GROOVY = '2.3.11'
        //V_JACKSON = '2.4.5'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    testSets {
        integrationTest { 
            dirName = 'test-integration'
        }
    }

    configurations {
        all*.exclude module: 'commons-logging'
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter"
        compile "com.google.guava:guava:$V_GUAVA"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.codehaus.groovy:groovy-all:$V_GROOVY"
        testCompile "org.spockframework:spock-core:1.0-groovy-2.3"
        testCompile "org.spockframework:spock-spring:1.0-groovy-2.3"
        //testCompile "org.assertj:assertj-core:3.0.0"
        testCompile "com.google.guava:guava-testlib:$V_GUAVA"
    }

    jar {
        version = ""
        manifest {
            attributes("Version": project.version)
        }
    }

    test {
        testLogging {
            exceptionFormat "full"
        }
        reports {
            html.enabled = false
            junitXml.destination = file("${buildDir}/test-results/${name}")
        }

        outputs.upToDateWhen { false }
    }
    
    integrationTest {
        testLogging {
            exceptionFormat "full"
        }
        reports {
            html.enabled = false
            junitXml.enabled = false
        }

        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    jacocoTestReport {
        reports {
            html.enabled = false
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task testRootReport(type: TestReport) {
    reportOn subprojects*.test
    destinationDir = file("${reporting.baseDir}/test")
    test.testLogging { 
        exceptionFormat "full" 
    }
}

task integrationTestRootReport(type: TestReport) {
    reportOn subprojects*.integrationTest
    destinationDir = file("${reporting.baseDir}/integrationTest")
    test.testLogging { 
        exceptionFormat "full" 
    }
}

task ciBuild {
    dependsOn allprojects*.build, 
        subprojects*.jacocoTestReport, 
        testRootReport, 
        integrationTestRootReport
}
