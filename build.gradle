/*
 * Copyright 2015 H. Wolf
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies { 
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE" 
        classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
    }
}

plugins {
    id 'org.unbroken-dome.test-sets' version '1.1.0'
    id "org.sonarqube" version "1.1"
}

def javaProjects = subprojects.findAll { it.name != 'client-ui' }

ext['spring.version'] = '4.2.2.RELEASE'

sonarqube {
    properties {
        property "sonar.host.url", "http://dev-server:9000"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
        property "sonar.projectVersion", new Date().format("yyyyMMdd-HHmmss")
    }
}

configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    
    repositories {
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-starter-parent:1.2.6.RELEASE'
        }
        dependencies {
            dependencySet(group: 'org.springframework.security.oauth', version: '2.0.7.RELEASE') {
                entry 'spring-security-oauth2'
            }
            dependencySet(group: 'org.springframework.cloud', version: '1.0.3.RELEASE') {
                entry 'spring-cloud-starter-security'
                entry 'spring-cloud-starter-zuul'
            }
            dependencySet(group: 'com.google.guava', version: '18.0') {
                entry 'guava'
                entry 'guava-testlib'
            }
            dependency "org.codehaus.groovy:groovy-all:2.4.5"
            dependencySet(group: 'org.spockframework', version: '1.0-groovy-2.4') {
                entry 'spock-core'
                entry 'spock-spring'
            }
            dependency "org.gebish:geb-spock:0.12.2"
            dependencySet(group: 'org.seleniumhq.selenium', version: '2.47.1') {
                entry 'selenium-firefox-driver'
                entry 'selenium-support'
            }
        }
    }
    
    configurations {
        //all*.exclude module: 'commons-logging'
        all*.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter"
        compile "com.google.guava:guava"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.codehaus.groovy:groovy-all"
        testCompile "org.spockframework:spock-core"
        testCompile "org.spockframework:spock-spring"
        testCompile "nl.jqno.equalsverifier:equalsverifier:1.7.5"
    }

    jacoco {
        toolVersion = "0.7.5.201505241946"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    testSets {
        integrationTest { 
            dirName = 'test-integration'
        }
    }
    
    jar {
        version = ""
        manifest {
            attributes("Version": project.version)
        }
    }

    test {
        testLogging {
            exceptionFormat "full"
        }
        reports {
            html.enabled = false
            junitXml.destination = file("${buildDir}/test-results/${name}")
        }

        outputs.upToDateWhen { false }
    }
    
    integrationTest {
        testLogging {
            exceptionFormat "full"
        }
        reports {
            html.enabled = false
            junitXml.enabled = false
        }

        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    jacocoTestReport {
        reports {
            html.enabled = false
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task testRootReport(type: TestReport) {
    reportOn javaProjects*.test
    destinationDir = file("${reporting.baseDir}/test")
    test.testLogging { 
        exceptionFormat "full" 
    }
}

task integrationTestRootReport(type: TestReport) {
    reportOn javaProjects*.integrationTest
    destinationDir = file("${reporting.baseDir}/integrationTest")
    test.testLogging { 
        exceptionFormat "full" 
    }
}

task ciBuild {
    dependsOn javaProjects*.build, 
        javaProjects*.jacocoTestReport, 
        testRootReport, 
        integrationTestRootReport
}

project.tasks.sonarqube.dependsOn javaProjects*.integrationTest
